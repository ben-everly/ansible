---
- hosts: all
  vars:
    home: "{{ lookup('env', 'HOME') }}"
    docker_compose_path: "/usr/local/bin/docker-compose"
    ansible_python_interpreter: /usr/bin/python3
    apt_packages:
      - automake
      - bash
      - composer
      - curl
      - dconf-editor
      - docker-ce
      - docker-ce-cli
      - enpass
      - exa
      - fonts-firacode
      - fzf
      - git
      - grep
      - gnome-tweaks
      - jq
      - kitty
      - less
      - mariadb-client
      - neovim
      - pkg-config
      - php
      - php-cli
      - php-curl
      - php-mbstring
      - php-xml
      - postgresql-client
      - python2
      - python3
      - python3-gpg
      - python3-pip
      - ripgrep
      - rcm
      - ruby-full
      - sed
      - silversearcher-ag
      - tmux
      - universal-ctags
      - unzip
      - vim
      - xmlstarlet
      - zsh
  environment:
      PATH: "{{home}}/.volta/bin:{{ansible_env.PATH}}"
  tasks:
      - name: apt installs for debian 11
        become: yes
        block:
          - name: upgrade dist
            apt:
              upgrade: dist
              update_cache: yes

          - name: add docker signing key
            apt_key:
              url: https://download.docker.com/linux/debian/gpg
              state: present

          - name: add docker apt repository
            apt_repository:
              repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable
              state: present
              filename: docker

          - name: add enpass signing key
            apt_key:
              url: https://apt.enpass.io/keys/enpass-linux.key
              state: present

          - name: add enpass apt repository
            apt_repository:
              repo: deb https://apt.enpass.io/ stable main
              state: present
              filename: docker

          - name: Install apt packages
            apt:
              name: "{{ apt_packages }}"
              state: present
              update_cache: yes

          - name: apt cleanup
            apt:
              autoremove: yes

      - name: install python2 pip
        block:
          - name: check if install script is downloaded
            stat:
              path: "./tmp/get-pip.py"
            register: script

          - name: download get-pip.py script
            get_url:
              url: "https://bootstrap.pypa.io/pip/2.7/get-pip.py"
              dest: "./tmp/get-pip.py"
            when: not script.stat.exists

          - name: run get-pip.py script
            become: yes
            script: "./tmp/get-pip.py"
            args:
              executable: python2
            when: not script.stat.exists

      - name: install pip packages
        pip:
          name: pynvim
          state: latest

      - name: install pip2 packages
        pip:
          name: pynvim
          state: latest
          executable: pip2

      - name: install ruby packages
        gem:
          name: neovim
          state: latest

      - name: install volta
        shell: curl https://get.volta.sh | bash
        args:
          warn: false
          chdir: "$HOME"
          creates: "$HOME/.volta/bin/volta"

      - name: check node version
        shell:
          cmd: node -v
        register: node_version
        check_mode: false
        changed_when: false

      - name: install node
        shell: volta install node
        when: node_version.rc != 0

      - name: install node neovim package
        npm:
          executable: "$HOME/.volta/bin/npm"
          name: neovim
          global: yes
          state: latest

      - name: install sql formatter
        npm:
          executable: "$HOME/.volta/bin/npm"
          name: sql-formatter-cli
          global: yes
          state: latest

      - name: install pnpm
        npm:
          executable: "$HOME/.volta/bin/npm"
          name: pnpm
          global: yes
          state: latest

      - name: dotfiles
        block:
          - name: clone dotfiles repo
            git:
              repo: "https://github.com/ben-everly/dotfiles"
              dest: "{{ home }}/.dotfiles"
            register: dotfiles

          - name: update dotfiles
            shell: rcup -f
            when: dotfiles.changed

      - name: install docker-compose
        block:
          - name: Check current docker-compose version.
            command: docker-compose --version
            register: docker_compose_current_version
            changed_when: false
            failed_when: false

          - name: Check latest version of docker compose
            uri:
              url: https://api.github.com/repos/docker/compose/releases/latest
            register: docker_compose

          - name: Delete existing docker-compose version if it's different.
            become: yes
            file:
              path: "{{ docker_compose_path }}"
              state: absent
            when: >
              docker_compose_current_version.stdout is defined
              and docker_compose.json.name not in docker_compose_current_version.stdout
          - name: Install Docker Compose (if configured).
            become: yes
            get_url:
              url: https://github.com/docker/compose/releases/download/{{ docker_compose.json.name }}/docker-compose-Linux-x86_64
              dest: "{{ docker_compose_path }}"
              mode: 0755

          - name: create docker group
            group:
              name: docker
              state: present

          - name: add user to docker group
            user:
              name: "{{ ansible_user_id }}"
              groups: docker
              append: yes
            become: yes

      - name: install gh cli tool
        block:
          - name: find latest release of gh cli
            uri:
              url: https://api.github.com/repos/cli/cli/releases/latest
            register: download

          - set_fact:
              asset: "{{ download.json.assets | select('match', '.*amd64.deb') | first }}"
          - set_fact:
              filename: "./tmp/{{ asset.name }}"
              url: "{{ asset.browser_download_url }}"

          - name: check if latest version of gh cli is already downloaded
            stat:
              path: "{{ filename }}"
            register: version

          - name: download latest version of gh cli
            get_url:
              url: "{{ url }}"
              dest: "{{ filename }}"
            when: not version.stat.exists

          - name: install latest version of gh cli
            apt: deb="{{ filename }}"
            become: yes
            when: not version.stat.exists

      - name: install dbxcli tool
        block:
          - name: find latest release of dbxcli
            uri:
              url: https://api.github.com/repos/dropbox/dbxcli/releases/latest
            register: download

          - set_fact:
              asset: "{{ download.json.assets | select('match', '.*linux-amd64') | first }}"
          - set_fact:
              filename: "./tmp/{{ download.json.name}}-{{ asset.name }}"
              url: "{{ asset.browser_download_url }}"

          - name: check if latest version of dbxcli is already downloaded
            stat:
              path: "{{ filename }}"
            register: version

          - name: download latest version of dbxcli
            get_url:
              url: "{{ url }}"
              dest: "{{ filename }}"
            when: not version.stat.exists

          - name: copy executable into path
            copy:
              src: "{{ filename }}"
              dest: /usr/local/bin/dbxcli
              mode: '0755'
            become: yes
            when: not version.stat.exists

      - name: set default shell
        become: yes
        shell:
          cmd: chsh -s /usr/bin/zsh {{ ansible_user_id }}
