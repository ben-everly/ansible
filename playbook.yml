---
- hosts: all
  vars:
    home: "{{ lookup('env', 'HOME') }}"
    docker_compose_version: v2.15.1
    ansible_python_interpreter: /usr/bin/python3
    apt_packages:
      - automake
      - awscli
      - bash
      - composer
      - cryptsetup
      - curl
      - dconf-editor
      - default-jdk
      - default-jre
      - exa
      - fd-find
      - file
      - fonts-firacode
      - fzf
      - git
      - golang-go
      - grep
      - gnome-tweaks
      - gnupg
      - jq
      - kitty
      - less
      - libnss3-tools
      - libc6-x32
      - libc6-i386
      - make
      - mariadb-client
      - pass
      - pass-extension-tomb
      - pinentry-curses
      - pkg-config
      - php
      - php-cli
      - php-curl
      - php-mbstring
      - php-xml
      - postgresql-client
      - python2
      - python3
      - python3-gpg
      - python3-pip
      - ranger
      - ripgrep
      - rcm
      - ruby-full
      - sed
      - snapd
      - sudo
      - universal-ctags
      - unzip
      - vim
      - vim-gtk3
      - zsh
  environment:
      PATH: "{{home}}/.volta/bin:{{ansible_env.PATH}}"
  roles:
    - { role: geerlingguy.docker, become: yes }
    - { role: enpass, become: yes }
    - { role: oberd, become: yes }
  tasks:
      - name: apt installs
        become: yes
        block:
          - name: Install apt packages
            apt:
              name: "{{ apt_packages }}"
              state: latest
              update_cache: yes

          - name: apt cleanup
            apt:
              autoremove: yes

      - name: install neovim
        block:
          - name: Check current neovim version.
            shell: nvim --version | head -n 1
            failed_when: false
            changed_when: false
            register: nvim_current_version

          - name: Check latest version of neovim
            uri:
              url: https://api.github.com/repos/neovim/neovim/releases/latest
            register: neovim

          - name: Download nvim deb
            become: yes
            when: >
              nvim_current_version.stdout is defined
              and neovim.json.name|lower not in nvim_current_version.stdout|lower
            get_url:
              url: "{{ neovim|json_query('json.assets[?name == `nvim-linux64.deb`].browser_download_url|[0]') }}"
              dest: ./tmp/neovim.deb
              mode: 755
            register: neovim_file

          - name: install neovim
            become: yes
            when: neovim_file.changed
            apt: deb="./tmp/neovim.deb"

      - name: snap installs
        become: yes
        snap:
          name:
            - spotify

      - name: install python2 pip
        block:
          - name: check if install script is downloaded
            stat:
              path: ./tmp/get-pip.py
            register: script

          - name: download get-pip.py script
            when: not script.stat.exists
            get_url:
              url: https://bootstrap.pypa.io/pip/2.7/get-pip.py
              dest: ./tmp/get-pip.py

          - name: run get-pip.py script
            become: yes
            when: not script.stat.exists
            script: ./tmp/get-pip.py
            args:
              executable: python2

      - name: install pip packages
        pip:
          name: pynvim
          state: latest

      - name: install pip2 packages
        pip:
          name: pynvim
          state: latest
          executable: pip2

      - name: install ruby packages
        gem:
          name: neovim
          state: latest

      - name: install volta
        shell: curl https://get.volta.sh | bash
        args:
          warn: false
          chdir: "$HOME"
          creates: "$HOME/.volta/bin/volta"

      - name: check node version
        shell:
          cmd: node -v
        check_mode: false
        failed_when: false
        changed_when: false
        register: node_version

      - name: install node
        when: node_version.rc != 0
        shell: volta install node

      - name: install node neovim package
        npm:
          executable: "$HOME/.volta/bin/npm"
          name: neovim
          global: yes
          state: latest

      - name: install pnpm
        npm:
          executable: "$HOME/.volta/bin/npm"
          name: pnpm
          global: yes
          state: latest

      - name: install typescript
        npm:
          executable: "$HOME/.volta/bin/npm"
          name: typescript
          global: yes
          state: latest

      - name: dotfiles
        block:
          - name: clone dotfiles repo
            git:
              repo: https://github.com/ben-everly/dotfiles
              dest: "{{ home }}/.dotfiles"
            register: dotfiles

          - name: update dotfiles
            when: dotfiles.changed
            shell: rcup -f

      - name: install gh cli tool
        block:
          - name: find latest release of gh cli
            uri:
              url: https://api.github.com/repos/cli/cli/releases/latest
            register: download

          - set_fact:
              asset: "{{ download.json.assets | select('match', '.*amd64.deb') | first }}"
          - set_fact:
              filename: "./tmp/{{ asset.name }}"
              url: "{{ asset.browser_download_url }}"

          - name: check if latest version of gh cli is already downloaded
            stat:
              path: "{{ filename }}"
            register: version

          - name: download latest version of gh cli
            when: not version.stat.exists
            get_url:
              url: "{{ url }}"
              dest: "{{ filename }}"

          - name: install latest version of gh cli
            become: yes
            when: not version.stat.exists
            apt: deb="{{ filename }}"

      - name: install dbxcli tool
        block:
          - name: find latest release of dbxcli
            uri:
              url: https://api.github.com/repos/dropbox/dbxcli/releases/latest
            register: download

          - set_fact:
              asset: "{{ download.json.assets | select('match', '.*linux-amd64') | first }}"
          - set_fact:
              filename: "./tmp/{{ download.json.name}}-{{ asset.name }}"
              url: "{{ asset.browser_download_url }}"

          - name: check if latest version of dbxcli is already downloaded
            stat:
              path: "{{ filename }}"
            register: version

          - name: download latest version of dbxcli
            when: not version.stat.exists
            get_url:
              url: "{{ url }}"
              dest: "{{ filename }}"

          - name: copy executable into path
            become: yes
            when: not version.stat.exists
            copy:
              src: "{{ filename }}"
              dest: /usr/local/bin/dbxcli
              mode: 755

      - name: set default shell
        become: yes
        shell:
          cmd: chsh -s /usr/bin/zsh {{ ansible_user_id }}

      - name: install ecsy
        get_url:
          url: https://github.com/oberd/ecsy/releases/download/v0.2.15/ecsy-v0.2.15-linux
          dest: ~/.local/bin/ecsy
          mode: 755

      - name: set alternatives
        become: yes
        shell:
          cmd: |
            update-alternatives --set x-terminal-emulator /usr/bin/kitty

      - name: install dropbox
        block:
          - name: download dropbox deb
            get_url:
              url: https://www.dropbox.com/download?dl=packages/ubuntu/dropbox_2020.03.04_amd64.deb
              dest: ./tmp/dropbox.deb
            register: dropbox_file

          - name: add dropbox signing key
            become: yes
            when: dropbox_file.changed
            get_url:
              url: https://www.linuxbabe.com/dropbox-signing-key.asc
              dest: /etc/apt/trusted.gpg.d/dropbox.asc
              mode: 644

          - name: install dropbox
            become: yes
            when: dropbox_file.changed
            apt: deb="./tmp/dropbox.deb"

      - name: install jet
        block:
          - name: download jet
            get_url:
              url: https://s3.amazonaws.com/codeship-jet-releases/2.14.0/jet-linux_amd64_2.14.0.tar.gz
              dest: ./tmp/jet.tar.gz
            register: jet_file

          - name: unzip jet
            when: jet_file.changed
            unarchive:
              src: ./tmp/jet.tar.gz
              dest: ~/.local/bin
              mode: 755

      - name: pop shell
        block:
          - name: clone pop shell repo
            git:
              repo: https://github.com/pop-os/shell.git
              dest: ./tmp/pop_shell
            register: pop_shell

          - name: install pop shell
            when: pop_shell.changed
            make:
              chdir: ./tmp/pop_shell
              target: local-install

      - name: install php debug client
        block:
          - name: clone php debug client repo
            git:
              repo: https://github.com/xdebug/vscode-php-debug.git
              dest: ./tmp/php-debug-client
            register: php_debug_client

          - name: install deps for php debug client
            when: php_debug_client.changed
            npm:
              path: ./tmp/php-debug-client

          - name: build php debug client
            when: php_debug_client.changed
            args:
              chdir: ./tmp/php-debug-client
            command: npm run build

      - name: install tomb
        block:
          - name: download tomb
            get_url:
              url: https://files.dyne.org/tomb/releases/Tomb-2.9.tar.gz
              dest: ./tmp/tomb.tar.gz
            register: tomb_file

          - name: unzip tomb_file
            when: tomb_file.changed
            shell: tar xvfz ./tomb.tar.gz
            args:
              chdir: ./tmp

          - name: run make
            become: true
            when: tomb_file.changed
            make:
              chdir: ./tmp/Tomb-2.9
              target: install

      - name: install chrome
        block:
          - name: download chrome
            get_url:
              url: https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
              dest: ./tmp/chrome.deb
            register: chrome_file

          - name: install chrome
            become: yes
            when: chrome_file.changed
            apt: deb="./tmp/chrome.deb"

      - name: install vim-anywhere
        shell: curl -fsSL https://raw.github.com/cknadler/vim-anywhere/master/install | bash
        args:
          creates: $HOME/.vim-anywhere

      - name: install javaSE
        block:
          - name: download javaSE
            get_url:
              url: https://download.oracle.com/java/17/latest/jdk-17_linux-x64_bin.deb
              dest: ./tmp/javaSE.deb
            register: javaSE_file

          - name: install javaSE
            become: yes
            when: javaSE_file.changed
            apt: deb="./tmp/javaSE.deb"
